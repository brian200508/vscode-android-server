Support openning multiple files

Index: code-server/lib/vscode/src/vs/workbench/services/environment/browser/environmentService.ts
===================================================================
--- old/code-server/lib/vscode/src/vs/workbench/services/environment/browser/environmentService.ts
+++ new/code-server/lib/vscode/src/vs/workbench/services/environment/browser/environmentService.ts
@@ -388,6 +388,7 @@ export class BrowserWorkbenchEnvironmentService implements IBrowserWorkbenchEnvi
 	@memoize
 	get filesToOpenOrCreate(): IPath<ITextEditorOptions>[] | undefined {
 		if (this.payload) {
+			const result: IPath<ITextEditorOptions>[] = []
 			const fileToOpen = this.payload.get('openFile');
 			if (fileToOpen) {
 				const fileUri = URI.parse(fileToOpen);
@@ -396,16 +397,37 @@ export class BrowserWorkbenchEnvironmentService implements IBrowserWorkbenchEnvi
 				if (this.payload.has('gotoLineMode')) {
 					const pathColumnAware = parseLineAndColumnAware(fileUri.path);
 
-					return [{
+					result.push({
 						fileUri: fileUri.with({ path: pathColumnAware.path }),
 						options: {
 							selection: !isUndefined(pathColumnAware.line) ? { startLineNumber: pathColumnAware.line, startColumn: pathColumnAware.column || 1 } : undefined
 						}
-					}];
+					});
+				} else {
+					result.push({ fileUri });
+				}
+			}
+			const filesToOpen = this.payload.get('openFiles') as any as string[];
+			if (filesToOpen) {
+				for (const fileToOpen of filesToOpen) {
+					const fileUri = URI.parse(fileToOpen);
+
+					// Support: --goto parameter to open on line/col
+					if (this.payload.has('gotoLineMode')) {
+						const pathColumnAware = parseLineAndColumnAware(fileUri.path);
+
+						result.push({
+							fileUri: fileUri.with({ path: pathColumnAware.path }),
+							options: {
+								selection: !isUndefined(pathColumnAware.line) ? { startLineNumber: pathColumnAware.line, startColumn: pathColumnAware.column || 1 } : undefined
+							}
+						});
+					} else {
+						result.push({ fileUri });
+					}
 				}
-
-				return [{ fileUri }];
 			}
+			return result;
 		}
 
 		return undefined;
