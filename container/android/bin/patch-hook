#!/usr/bin/python3

import sys, os, re

cwd = os.getcwd()

for a in sys.argv:
    if ("InotifyEventLoop.cpp" in a) and os.path.isfile(a):
        print("[vh] Patch InotifyEventLoop")
        with open(a,"r") as f:
            content = f.read()
        if "vscode-build/patch" not in content:
            content = "#include \""+("../"*20)+"/vscode-build/patch/bthread-pthread_cancel.h\"\n"+content
            with open(a,"w") as f:
                f.write(content)
    elif ("keytar_posix.cc" in a) and os.path.isfile(a):
        print("[vh] Patch keytar_posix.cc")
        with open("/vscode-build/patch/keytar_posix.cc","r") as f:
            content = f.read()
        with open(a,"w") as f:
            f.write(content)
    elif ("WatchmanBackend.cc" in a) and os.path.isfile(a):
        print("[vh] Patch WatchmanBackend.cc")
        with open(a,"r") as f:
            content = f.read()
        if "vscode-build/patch" not in content:
            content = "// vscode-build/patch\n" + content.replace('bool WatchmanBackend::checkAvailable() {','bool WatchmanBackend::checkAvailable() {return false;')
            with open(a,"w") as f:
                f.write(content)
    elif ('native-keymap' in cwd) and ('keysym_to_unicode.cc' in a) and os.path.isfile(a):
        print("[vh] Patch native-keymap x11")
        with open(a,"r") as f:
            content = f.read()
        for sym in [
            'XK_dead_doublegrave',
            'XK_dead_belowring',
            'XK_dead_belowmacron',
            'XK_dead_belowcircumflex',
            'XK_dead_belowtilde',
            'XK_dead_belowbreve',
            'XK_dead_belowdiaeresis',
            'XK_dead_invertedbreve',
            'XK_dead_belowcomma',
            'XK_dead_currency',
        ]:
            content = re.sub('[^\n\r]+'+sym+'[^\n\r]+','',content)
        with open(a,"w") as f:
            f.write(content)
    elif ('native-keymap' in cwd) and ('keyboard_x.cc' in a) and os.path.isfile(a):
        print("[vh] Patch native-keymap keyboard")
        with open(a,"r") as f:
            content = f.read()
        for sym in [
            'X11/extensions/XKBrules',
        ]:
            content = re.sub('[^\n\r]+'+sym+'[^\n\r]+','',content)
        #content = re.sub('XkbRF_VarDefsRec.*XCloseDisplay\(display\);','',content, flags=re.S)
        content = re.sub(r'pthread_cancel(.*?)\)',r'pthread_kill\1,0)',content)
        new_content = ""
        remove_flag = False
        for l in content.splitlines():
            if "XkbRF_VarDefsRec" in l: remove_flag = True
            if l == "}": remove_flag = False
            if not remove_flag: new_content += l + "\n"
            if "XCloseDisplay" in l: remove_flag = False
        with open(a,"w") as f:
            f.write(new_content)
            
